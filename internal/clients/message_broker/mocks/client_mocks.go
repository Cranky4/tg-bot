// Code generated by MockGen. DO NOT EDIT.
// Source: internal/clients/message_broker/client.go

// Package mock_messagebroker is a generated GoMock package.
package mock_messagebroker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messagebroker "gitlab.ozon.dev/cranky4/tg-bot/internal/clients/message_broker"
)

// MockMessageBroker is a mock of MessageBroker interface.
type MockMessageBroker struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBrokerMockRecorder
}

// MockMessageBrokerMockRecorder is the mock recorder for MockMessageBroker.
type MockMessageBrokerMockRecorder struct {
	mock *MockMessageBroker
}

// NewMockMessageBroker creates a new mock instance.
func NewMockMessageBroker(ctrl *gomock.Controller) *MockMessageBroker {
	mock := &MockMessageBroker{ctrl: ctrl}
	mock.recorder = &MockMessageBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBroker) EXPECT() *MockMessageBrokerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockMessageBroker) Produce(ctx context.Context, topic, key string, value []byte, meta []messagebroker.MetaItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, topic, key, value, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockMessageBrokerMockRecorder) Produce(ctx, topic, key, value, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockMessageBroker)(nil).Produce), ctx, topic, key, value, meta)
}
