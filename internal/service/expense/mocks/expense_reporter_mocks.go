// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/expense/expense_reporter.go

// Package mock_expense_service is a generated GoMock package.
package mock_expense_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "gitlab.ozon.dev/cranky4/tg-bot/internal/model"
	expense_service "gitlab.ozon.dev/cranky4/tg-bot/internal/service/expense"
)

// MockExpenseReporter is a mock of ExpenseReporter interface.
type MockExpenseReporter struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseReporterMockRecorder
}

// MockExpenseReporterMockRecorder is the mock recorder for MockExpenseReporter.
type MockExpenseReporterMockRecorder struct {
	mock *MockExpenseReporter
}

// NewMockExpenseReporter creates a new mock instance.
func NewMockExpenseReporter(ctrl *gomock.Controller) *MockExpenseReporter {
	mock := &MockExpenseReporter{ctrl: ctrl}
	mock.recorder = &MockExpenseReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseReporter) EXPECT() *MockExpenseReporterMockRecorder {
	return m.recorder
}

// GetReport mocks base method.
func (m *MockExpenseReporter) GetReport(ctx context.Context, period model.ExpensePeriod, currencty string) (*expense_service.ExpenseReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", ctx, period, currencty)
	ret0, _ := ret[0].(*expense_service.ExpenseReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockExpenseReporterMockRecorder) GetReport(ctx, period, currencty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockExpenseReporter)(nil).GetReport), ctx, period, currencty)
}
