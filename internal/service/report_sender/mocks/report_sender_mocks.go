// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/report_sender/report_sender.go

// Package mock_reportsender is a generated GoMock package.
package mock_reportsender

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	expense_reporter "gitlab.ozon.dev/cranky4/tg-bot/internal/service/expense_reporter"
)

// MockReportSender is a mock of ReportSender interface.
type MockReportSender struct {
	ctrl     *gomock.Controller
	recorder *MockReportSenderMockRecorder
}

// MockReportSenderMockRecorder is the mock recorder for MockReportSender.
type MockReportSenderMockRecorder struct {
	mock *MockReportSender
}

// NewMockReportSender creates a new mock instance.
func NewMockReportSender(ctrl *gomock.Controller) *MockReportSender {
	mock := &MockReportSender{ctrl: ctrl}
	mock.recorder = &MockReportSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportSender) EXPECT() *MockReportSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockReportSender) Send(ctx context.Context, report *expense_reporter.ExpenseReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, report)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockReportSenderMockRecorder) Send(ctx, report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockReportSender)(nil).Send), ctx, report)
}
