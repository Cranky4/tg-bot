// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/expenses.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	expenses "gitlab.ozon.dev/cranky4/tg-bot/internal/utils/expenses"
)

// MockExpensesRepository is a mock of ExpensesRepository interface.
type MockExpensesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExpensesRepositoryMockRecorder
}

// MockExpensesRepositoryMockRecorder is the mock recorder for MockExpensesRepository.
type MockExpensesRepositoryMockRecorder struct {
	mock *MockExpensesRepository
}

// NewMockExpensesRepository creates a new mock instance.
func NewMockExpensesRepository(ctrl *gomock.Controller) *MockExpensesRepository {
	mock := &MockExpensesRepository{ctrl: ctrl}
	mock.recorder = &MockExpensesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpensesRepository) EXPECT() *MockExpensesRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockExpensesRepository) Add(expense expenses.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockExpensesRepositoryMockRecorder) Add(expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockExpensesRepository)(nil).Add), expense)
}

// GetExpenses mocks base method.
func (m *MockExpensesRepository) GetExpenses(period expenses.ExpensePeriod) ([]*expenses.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenses", period)
	ret0, _ := ret[0].([]*expenses.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenses indicates an expected call of GetExpenses.
func (mr *MockExpensesRepositoryMockRecorder) GetExpenses(period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenses", reflect.TypeOf((*MockExpensesRepository)(nil).GetExpenses), period)
}

// GetFreeLimit mocks base method.
func (m *MockExpensesRepository) GetFreeLimit(category string) (int64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreeLimit", category)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFreeLimit indicates an expected call of GetFreeLimit.
func (mr *MockExpensesRepositoryMockRecorder) GetFreeLimit(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeLimit", reflect.TypeOf((*MockExpensesRepository)(nil).GetFreeLimit), category)
}

// SetLimit mocks base method.
func (m *MockExpensesRepository) SetLimit(category string, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLimit", category, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLimit indicates an expected call of SetLimit.
func (mr *MockExpensesRepositoryMockRecorder) SetLimit(category, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLimit", reflect.TypeOf((*MockExpensesRepository)(nil).SetLimit), category, amount)
}
